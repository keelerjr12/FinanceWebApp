@page
@model FinanceWebApp.Areas.MonteCarlo.Pages.IndexModel
@{
}

<h1>Monte Carlo Simulation</h1>

<form class="mt-4 mb-4" action="" method="get">
    <div class="form-group">
        <label asp-for="MonteCarloFormModel.NumYears">Number of Years:</label>
        <input class="form-control" asp-for="MonteCarloFormModel.NumYears" />
        <span asp-validation-for="MonteCarloFormModel.NumYears" class="text-danger"></span>
    </div>
    <div class="form-group">
        <label asp-for="MonteCarloFormModel.InitialValue">Initial Value:</label>
        <div class="input-group mb-3">
            <div class="input-group-prepend">
                <span class="input-group-text">$</span>
            </div>
            <input class="form-control" asp-for="MonteCarloFormModel.InitialValue" />
            <div class="input-group-append">
                <span class="input-group-text">.00</span>
            </div>
        </div>
        <span asp-validation-for="MonteCarloFormModel.InitialValue" class="text-danger"></span>
    </div>
    <div class="form-group">
        <label asp-for="MonteCarloFormModel.Contribution">Contribution:</label>
        <div class="input-group mb-3">
            <div class="input-group-prepend">
                <span class="input-group-text">$</span>
            </div>
            <input class="form-control" asp-for="MonteCarloFormModel.Contribution" />
            <div class="input-group-append">
                <span class="input-group-text">.00</span>
            </div>
        </div>
        <span asp-validation-for="MonteCarloFormModel.Contribution" class="text-danger"></span>
    </div>
    <div class="form-check">
        <input class="form-check-input" asp-for="MonteCarloFormModel.InflationAdjusted" />
        <label class="form-check-label" asp-for="MonteCarloFormModel.InflationAdjusted">Inflation Adjusted</label>
    </div>
    <button type="submit" class="btn btn-primary">Submit</button>
</form>

@if (Model.ModelState.IsValid)
{
    @await Component.InvokeAsync(typeof(FinanceWebApp.Areas.MonteCarlo.ViewComponents.MonteCarloChartViewComponent),
        new
            {
                numYears = Model.MonteCarloFormModel.NumYears,
        max = Model.Trials["Max"],
                median = Model.Trials["Median"],
                min = Model.Trials["Min"]
            })

    @await Component.InvokeAsync(typeof(FinanceWebApp.Areas.MonteCarlo.ViewComponents.MonteCarloStatsViewComponent), Model.Trials)
}
